# 仰晨不牛马
# 牛马时间：2022/7/6 23:36:43

'''可变序列and不可变序列'''
"""可变序列(可以对序列执行增、删、改操作，对象地址不发生更改)：列表，字典"""
列表 = [1, 2, 3]
print(id(列表), 列表)
列表.append(4)
print(id(列表), 列表)

'''不可变序列(没有增、删、改操作）：字符串，元组'''

字符串 = '天美狗'
print(id(字符串))
字符串 = 字符串 + '天游更狗'
print(id(字符串))
print(字符串)  # 但是ID变了，天美狗天游更狗

print('----------元组的创建---2种方式-----------')
print('第一种（）或者括号也可省略-----------------------------')
元组1 = ('鸡太美', '天美美jj', '天游更沙避')
print(元组1, type(元组1))  # ('鸡太美', '天美美jj', '天游更沙避') <class 'tuple'>
元组11 = '无法荔枝', '没有树枝', '就食油饼', "省略括号"
print(元组11)  # ('无法荔枝', '没有树枝', '就食油饼', '省略括号')

print('第二种内置函数tuple（）------------------')
元组2 = tuple(('timiNOjj', 'tianyouISdog', 16767))
print(元组2)

print('如果元组只有一个元素那就必须加,才能表示其为元组------------------')
元组3 = 11,
元组4 = ('不忘初心'),
元组4 = '不忘初心',

print(元组3, type(元组3))  # (11,) <class 'tuple'>
print(元组4, type(元组4))  # ('不忘初心',) <class 'tuple'>

'''
为什么要将元组设计成不可变序列
在多任务环境下，同时操作对象时不需要加锁·因此，在程序中尽量使用不可变序列
'''
"""
注意事项:元组中存储的是对象的引用
a)如果元组中对象本身不可对象，则不能再引用其它对象
b)如果元组中的对象是可变对象，则可变对象的引用不允许改变，但数据可以改变
"""

元组 = (556, ['列表', '是可变的', 666], '我是第三个元素索引为2')
print(id(元组[1]), 元组)                # 1991635875080 (556, ['列表', '是可变的', 666], '我是第三个元素索引为2')
# 元组[0]=245                          #报错    #TypeError: 'tuple' object does not support item assignment
元组[1].append(777)                    # 元组里面的列表是可以增、删、改的
print(id(元组[1]), 元组)                # 1991635875080 (556, ['列表', '是可变的', 666, 777], '我是第三个元素索引为2')

print('++++===----------元组的遍历——for*in*：————————————————————')

y元组 = ('0=球', 'j=鸡', "树枝666", '中分头', '背带裤')

print('荔枝' in y元组)  # False
print('树枝' not in y元组)  # True

for ikun in y元组:
    print(ikun, end='~')  # 0=球~j=鸡~树枝666~中分头~背带裤~
print()
